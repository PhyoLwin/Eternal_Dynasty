/*
 Copyright (C) Federico Zivolo 2017
 Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).
 */
(function(e, t) {
    'object' == typeof exports && 'undefined' != typeof module ? module.exports = t() : 'function' == typeof define && define.amd ? define(t) : e.Popper = t();
})(this, function() {
    'use strict';

    function e(e) {
        return e && '[object Function]' === {}.toString.call(e);
    }

    function t(e, t) {
        if (1 !== e.nodeType) return [];
        var o = window.getComputedStyle(e, null);
        return t ? o[t] : o;
    }

    function o(e) {
        return 'HTML' === e.nodeName ? e : e.parentNode || e.host;
    }

    function n(e) {
        if (!e || -1 !== ['HTML', 'BODY', '#document'].indexOf(e.nodeName)) return window.document.body;
        var i = t(e), r = i.overflow, p = i.overflowX, s = i.overflowY;
        return /(auto|scroll)/.test(r + s + p) ? e : n(o(e));
    }

    function r(e) {
        var o = e && e.offsetParent, i = o && o.nodeName;
        return i && 'BODY' !== i && 'HTML' !== i ? -1 !== ['TD', 'TABLE'].indexOf(o.nodeName) && 'static' === t(o, 'position') ? r(o) : o : window.document.documentElement;
    }

    function p(e) {
        var t = e.nodeName;
        return 'BODY' !== t && ('HTML' === t || r(e.firstElementChild) === e);
    }

    function s(e) {
        return null === e.parentNode ? e : s(e.parentNode);
    }

    function d(e, t) {
        if (!e || !e.nodeType || !t || !t.nodeType) return window.document.documentElement;
        var o = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,
            i = o ? e : t,
            n = o ? t : e,
            a = document.createRange();
        a.setStart(i, 0);
        a.setEnd(n, 0);
        var f = a.commonAncestorContainer;
        if (e !== f && t !== f || i.contains(n)) return p(f) ? f : r(f);
        var l = s(e);
        return l.host ? d(l.host, t) : d(e, s(t).host);
    }

    function a(e) {
        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 'top',
            o = 'top' === t ? 'scrollTop' : 'scrollLeft',
            i = e.nodeName;
        if ('BODY' === i || 'HTML' === i) {
            var n = window.document.documentElement,
                r = window.document.scrollingElement || n;
            return r[o];
        }
        return e[o];
    }

    function f(e, t) {
        var o = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
            i = a(t, 'top'),
            n = a(t, 'left'),
            r = o ? -1 : 1;
        return e.top += i * r, e.bottom += i * r, e.left += n * r, e.right += n * r, e;
    }

    function l(e, t) {
        var o = 'x' === t ? 'Left' : 'Top',
            i = 'Left' == o ? 'Right' : 'Bottom';
        return +e['border' + o + 'Width'].split('px')[0] + +e['border' + i + 'Width'].split('px')[0];
    }

    function m(e, t, o, i) {
        return _(t['offset' + e], o['client' + e], o['offset' + e], ie() ? o['offset' + e] + i['margin' + ('Height' === e ? 'Top' : 'Left')] + i['margin' + ('Height' === e ? 'Bottom' : 'Right')] : 0);
    }

    function h() {
        var e = window.document.body,
            t = window.document.documentElement,
            o = ie() && window.getComputedStyle(t);
        return {
            height: m('Height', e, t, o),
            width: m('Width', e, t, o)
        };
    }

    function c(e) {
        return se({}, e, { right: e.left + e.width, bottom: e.top + e.height });
    }

    function g(e) {
        var o = {};
        if (ie()) try {
            o = e.getBoundingClientRect();
            var i = a(e, 'top'),
                n = a(e, 'left');
            o.top += i;
            o.left += n;
            o.bottom += i;
            o.right += n;
        } catch (e) {} else o = e.getBoundingClientRect();
        var r = { left: o.left, top: o.top, width: o.right - o.left, height: o.bottom - o.top },
            p = 'HTML' === e.nodeName ? h() : {},
            s = p.width || e.clientWidth || r.right - r.left,
            d = p.height || e.clientHeight || r.bottom - r.top,
            f = e.offsetWidth - s,
            m = e.offsetHeight - d;

        if (f || m) {
            var g = t(e);
            f -= l(g, 'x');
            m -= l(g, 'y');
            r.width -= f;
            r.height -= m;
        }
        return c(r);
    }

    function u(e, o) {
        var i = ie(),
            r = 'HTML' === o.nodeName,
            p = g(e),
            s = g(o),
            d = n(e),
            a = t(o),
            l = +a.borderTopWidth.split('px')[0],
            m = +a.borderLeftWidth.split('px')[0],
            h = c({ top: p.top - s.top - l, left: p.left - s.left - m, width: p.width, height: p.height });

        if (h.marginTop = 0, h.marginLeft = 0, !i && r) {
            var u = +a.marginTop.split('px')[0],
                b = +a.marginLeft.split('px')[0];
            h.top -= l - u;
            h.bottom -= l - u;
            h.left -= m - b;
            h.right -= m - b;
            h.marginTop = u;
            h.marginLeft = b;
        }
        return (i ? o.contains(d) : o === d && 'BODY' !== d.nodeName) && (h = f(h, o)), h;
    }

    function b(e) {
        var t = window.document.documentElement,
            o = u(e, t),
            i = _(t.clientWidth, window.innerWidth || 0),
            n = _(t.clientHeight, window.innerHeight || 0),
            r = a(t),
            p = a(t, 'left'),
            s = { top: r - o.top + o.marginTop, left: p - o.left + o.marginLeft, width: i, height: n };
        return c(s);
    }

    function y(e) {
        var i = e.nodeName;
        return 'BODY' === i || 'HTML' === i ? !1 : 'fixed' === t(e, 'position') || y(o(e));
    }

    function w(e, t, i, r) {
        var p = { top: 0, left: 0 },
            s = d(e, t);
        if ('viewport' === r) p = b(s);
        else {
            var a;
            'scrollParent' === r ? (a = n(o(e)), 'BODY' === a.nodeName && (a = window.document.documentElement)) : 'window' === r ? a = window.document.documentElement : a = r;
            var f = u(a, s);
            if ('HTML' === a.nodeName && !y(s)) {
                var l = h(),
                    m = l.height,
                    c = l.width;
                p.top += f.top - f.marginTop;
                p.bottom = m + f.top;
                p.left += f.left - f.marginLeft;
                p.right = c + f.left;
            } else p = f;
        }
        return p.left += i, p.top += i, p.right -= i, p.bottom -= i, p;
    }

    function v(e) {
        var t = e.width,
            o = e.height;
        return t * o;
    }

    function E(e, t, o, i, n) {
        var r = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;
        if (-1 === e.indexOf('auto')) return e;
        var p = w(o, i, r, n),
            s = { top: { width: p.width, height: t.top - p.top }, right: { width: p.right - t.right, height: t.height }, bottom: { width: p.width, height: p.bottom - t.bottom }, left: { width: t.left - p.left, height: t.height } },
            d = Object.keys(s).map(function(e) { return { key: e, area: v(s[e]) }; }).sort(function(e, t) { return t.area - e.area; }),
            a = d[0].key;
        return a;
    }

    function O(e) {
        var t = window.getComputedStyle(e);
        return 'fixed' !== t.position;
    }

    function P(e, t) {
        return -1 === ['scroll', 'auto'].indexOf(t.overflow) && -1 === ['scroll', 'auto'].indexOf(t.overflowX) && -1 === ['scroll', 'auto'].indexOf(t.overflowY) ? e : e + 'px';
    }

    function C(e, t) {
        var o = e && e.nodeType === Node.ELEMENT_NODE && e;
        if (!o) return {};
        var i = window.getComputedStyle(o),
            n = i.marginLeft,
            r = i.marginTop,
            p = i.marginRight,
            s = i.marginBottom;
        return {
            marginLeft: parseInt(n, 10),
            marginTop: parseInt(r, 10),
            marginRight: parseInt(p, 10),
            marginBottom: parseInt(s, 10)
        };
    }

    function _e() {
        var e = window.getComputedStyle(document.documentElement);
        return e && e.overflow && e.overflowX && e.overflowY;
    }

    function ie() {
        return 'fixed' === _e();
    }

    function e(e) {
        return e && e.nodeType === Node.ELEMENT_NODE && e;
    }

    function te(e, t) {
        var o = window.getComputedStyle(e),
            i = o.transform,
            n = o.transformOrigin,
            r = o.perspective;
        return [i, n, r].join(' ');
    }

    return {
        getBoundingClientRect: g,
        getScroll: a,
        getDocument: d,
        getComputedStyle: t,
        getTransformOrigin: te,
        getDocumentElement: function() { return window.document.documentElement; },
        getScrollParent: n,
        getOffsetParent: r,
        getOffsetRect: u,
        getBoundingClientRectForViewport: b,
        getOffsetRectRelativeToDocument: function(e) { return g(e); },
        getViewportRect: function(e) { return b(e); },
        getScrollParentOf: function(e) { return n(o(e)); },
        getDocumentElementRect: function() { return b(window.document.documentElement); },
        getOffsetRectRelativeToParent: function(e) { return g(e); },
        getPadding: function(e) { return C(e); },
        getTransformOrigin: te,
        getBoundingClientRectForElement: function(e) { return g(e); },
        getBoundingClientRectForViewport: function(e) { return b(e); },
        getBoundingClientRectForViewportAndDocument: function(e) { return g(e); },
        getScrollParentOfDocument: function() { return n(window.document.body); }
    };
});
